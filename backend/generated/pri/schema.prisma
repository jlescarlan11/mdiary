generator client {
  provider = "prisma-client-js"
  output   = "../generated/pri"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
}

model User {
  id          String        @id @default(uuid())
  username    String        @unique @db.VarChar(50)
  email       String        @unique @db.VarChar(255)
  password    String        @db.VarChar(255)
  photoUrl    String?       @map("photo_url")
  role        Role          @default(USER)
  createdAt   DateTime      @default(now()) @map("created_at")
  updatedAt   DateTime      @updatedAt @map("updated_at")
  DiaryEntry  DiaryEntry[]
  followers   UserFollow[]  @relation("follower")
  following   UserFollow[]  @relation("followee")
  EntryLike   EntryLike[]
  ActivityLog ActivityLog[] // Added relation to ActivityLog

  @@index([email])
  @@map("users")
}

model Movie {
  id          String          @id @default(uuid())
  title       String          @db.VarChar(255)
  year        Int
  duration    Int
  description String
  posterUrl   String          @map("poster_url")
  createdAt   DateTime        @default(now()) @map("created_at")
  updatedAt   DateTime        @updatedAt @map("updated_at")
  DiaryEntry  DiaryEntry[]
  genres      MovieGenre[]
  directors   MovieDirector[]

  @@unique([title, year])
  @@index([title])
  @@index([year])
  @@map("movies")
}

model Genre {
  id     String       @id @default(uuid())
  name   String       @unique @db.VarChar(50)
  movies MovieGenre[]

  @@map("genres")
}

model Director {
  id        String          @id @default(uuid())
  firstName String          @map("first_name") @db.VarChar(50)
  lastName  String          @map("last_name") @db.VarChar(50)
  movies    MovieDirector[]

  @@unique([firstName, lastName])
  @@map("directors")
}

model Tag {
  id      String     @id @default(uuid())
  name    String     @unique @db.VarChar(50)
  entries EntryTag[]

  @@map("tags")
}

model DiaryEntry {
  id              String      @id @default(uuid())
  user            User        @relation(fields: [userId], references: [id])
  userId          String      @map("user_id")
  movie           Movie       @relation(fields: [movieId], references: [id])
  movieId         String      @map("movie_id")
  lastWatchedDate DateTime    @map("last_watched_date")
  watchedCount    Int         @default(0) @map("watched_count")
  rating          Int         @db.SmallInt
  review          String?
  tags            EntryTag[]
  likes           EntryLike[]
  createdAt       DateTime    @default(now()) @map("created_at")
  updatedAt       DateTime    @updatedAt @map("updated_at")

  @@index([userId])
  @@index([movieId])
  @@index([lastWatchedDate])
  @@map("diary_entries")
}

// Junction Tables
model EntryTag {
  diaryEntryId String     @map("diary_entry_id")
  tagId        String     @map("tag_id")
  entry        DiaryEntry @relation(fields: [diaryEntryId], references: [id])
  tag          Tag        @relation(fields: [tagId], references: [id])

  @@id([diaryEntryId, tagId])
  @@index([tagId])
  @@map("entry_tags")
}

model MovieGenre {
  movieId String @map("movie_id")
  genreId String @map("genre_id")
  movie   Movie  @relation(fields: [movieId], references: [id])
  genre   Genre  @relation(fields: [genreId], references: [id])

  @@id([movieId, genreId])
  @@index([genreId])
  @@map("movie_genres")
}

model MovieDirector {
  movieId    String   @map("movie_id")
  directorId String   @map("director_id")
  movie      Movie    @relation(fields: [movieId], references: [id])
  director   Director @relation(fields: [directorId], references: [id])

  @@id([movieId, directorId])
  @@index([directorId])
  @@map("movie_directors")
}

model UserFollow {
  followerId String @map("follower_id")
  followeeId String @map("followee_id")
  follower   User   @relation("follower", fields: [followerId], references: [id])
  followee   User   @relation("followee", fields: [followeeId], references: [id])

  @@id([followerId, followeeId])
  @@index([followeeId])
  @@map("user_follows")
}

model EntryLike {
  userId       String     @map("user_id")
  diaryEntryId String     @map("diary_entry_id")
  user         User       @relation(fields: [userId], references: [id])
  entry        DiaryEntry @relation(fields: [diaryEntryId], references: [id])

  @@id([userId, diaryEntryId])
  @@index([diaryEntryId])
  @@map("entry_likes")
}

// Added ActivityLog model
model ActivityLog {
  id        String   @id @default(uuid())
  type      String // e.g., "USER_LOGIN", "MOVIE_CREATED", "DIARY_ENTRY_ADDED"
  details   String? // Optional details about the activity
  createdAt DateTime @default(now()) @map("created_at")
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @map("user_id")

  @@index([userId])
  @@index([createdAt])
  @@map("activity_logs")
}
